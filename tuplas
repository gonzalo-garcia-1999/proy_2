def lectura_listas_tuplas():
  print("Las tuplas son otro tipo de estructura de datos."
        "\n Tienen las mismas caracteristicas que una lista, solo que se utiliza paréntesis () en vez de corchetes[]."
        "\n"
        "\nEjemplo:"
        "\n tupla_ejemplo = (1,3,6,9)"
        "\nprint(tupla_ejemplos)"
        "\n>>(1,3,6,9)"
        "\n"
        "\nprint(max(tupla_ejemplos))"
        "\n>>9")
  e=input()
  print("A diferencia de una lista que si es posible alterar su contenido, una vez que se crea una tupla, no se puede alterar su contenido. "
  "\n"
  "\ntupla_ejemplo = (1,2,3)"
  "\ntupla[2] = 0"
  "\n>>TypeError: 'tuple' object does not support ítem assignment")
  e=input()
  print(
    "\n"
    "\nLas tuplas tienen un procedimiento para el unpacking de sus valores, es decir, para que cada valor pueda ser desempaquetado a variables o parámetros."
    "\n"
    "\nEjemplos:"
    "\ntupla_ejemplo = (1, 2, 3, 4)"
    "\nprint(tupla)"
    "\n>>(1, 2, 3, 4)"
    "\n"
    "\ndef imprime_tupla(a, b, c, d):"
    "\n    print(a, b, c, d)"
    "\ntupla = (1, 2, 3, 4)"
    "\nprint(imprime_tupla(tupla))"
    "\n>>TypeError: fun() missing 3 required positional arguments: 'b', 'c', and 'd'"
    "\n"
    "\n#correctamente se utiliza el *"
    "\nprint(imprime_tupla(*tupla))"
    "\n>>1 2 3 4")
  e=input()
  print("Para realizar una asignación, podemos poner una tupla en el lado izquierdo."
  "\n"
  "\nEjemplos:"
  "\n (x,y) = 50, 'pepe'"
  "\nprint(y)"
  "\n>>pepe"
  "\n"
  "\n (d,f) = (50, 34)"
  "\nprint(d)"
  "\n>>50")
  e=input()
  print("Tambien se puede comparar tuplas utilizando operadores. Si el primer elemento es igual, Python pasa al siguiente elemento, y así sucesivamente, hasta encontrar elementos que difieren. Cuando se traba de letras se utiliza el orden de alfabeto. Cuando la comparación es correcta, se le nombre True y cuando es incorrecta False"
  "\nLos signos son;"
  "\n-mayor que (>)"
  "\n-menor que (>)"
  "\n-igual que (==)"
  "\n-desigual (!=)"
  "\n"
  "\nEjemplos:"
  "\nx = ('Jones', 'Sally') > ('Adams', 'Sam')"
  "\nprint(x)"
  "\n>>True"
  "\n"
  "\n a= (0, 1, 2000) < (0, 3, 4)"
  "\nprint(a)"
  "\n>>True"
  "\n"
  "\n a= (0, 1, 2000) == (0, 3, 4)"
  "\nprint(a)"
  "\n>>False"
  "\n"
  "\n a= (0, 1, 4) != (0, 3, 4)"
  "\nprint(a)"
  "\n>>True")
